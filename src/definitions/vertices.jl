# PeriodicVertex definition and basic functions

export PeriodicVertex, PeriodicVertex1D, PeriodicVertex2D, PeriodicVertex3D
export hash_position, reverse_hash_position

"""
    PeriodicVertex{N}

Vertex type for an `N`-periodic graph.

A vertex is uniquely determined by the identifier of its representative in the
a fixed initial cell, and the offset of the cell containing the vertex compared
to the the initial cell.
Vertex identifiers start at 1.
"""
struct PeriodicVertex{N}
    v::Int
    ofs::SVector{N,Int}
end
PeriodicVertex{N}(n::Integer) where {N} = PeriodicVertex{N}(n, zero(SVector{N,Int}))
PeriodicVertex(v::Integer, ofs::Union{SVector{N},NTuple{N}}) where {N} = PeriodicVertex{N}(v, ofs)

function show(io::IO, x::PeriodicVertex{N}) where N
    if get(io, :typeinfo, Any) != PeriodicVertex{N}
        print(io, PeriodicVertex{N})
    end
    if N == 0
        print(io, '(', x.v, ')')
    else
        print(io, '(', x.v, ", (", join(x.ofs, ','))
        N == 1 && print(io, ',')
        print(io, ')', ')')
    end
end
function convert(::Type{PeriodicVertex{N}}, (dst, offset)::Tuple{Integer,Any}) where N
    PeriodicVertex{N}(dst, offset)
end
function convert(::Type{PeriodicVertex}, (dst, offset)::Tuple{Integer,Union{SVector{N},NTuple{N}}}) where N
    PeriodicVertex{N}(dst, offset)
end
function cmp(x::PeriodicVertex{N}, y::PeriodicVertex{N}) where N
    c = cmp(x.v, y.v)
    iszero(c) || return c
    return cmp(x.ofs, y.ofs)
end
isless(x::PeriodicVertex{N}, y::PeriodicVertex{N}) where {N} = cmp(x, y) < 0
==(x::PeriodicVertex{N}, y::PeriodicVertex{M}) where {N,M} = N == M && iszero(cmp(x, y))
hash(x::PeriodicVertex, h::UInt) = hash(x.ofs, hash(x.v, h))

const PeriodicVertex1D = PeriodicVertex{1}
const PeriodicVertex2D = PeriodicVertex{2}
const PeriodicVertex3D = PeriodicVertex{3}

ndims(::PeriodicVertex{N}) where {N} = N

iterate(x::PeriodicVertex, _::Val{1}=Val(1)) = (x.v, Val(2))
iterate(x::PeriodicVertex, ::Val{2}) = (x.ofs, nothing)
Base.last(x::PeriodicVertex) = x.ofs


@inline ZtoN(x::Signed) = abs(2x + signbit(x)) # abs(bitrotate(x, 1)) # abs((x << 1) | (x >>> 63)) # (abs(x) << 1) - (x<0)

const savedhashes3 = Int[406 390 374 358 350 366 382 398 663; 454 503 501 499 498 500 502 504 645; 438 489 487 485 484 486 488 490 627; 422 475 473 471 470 472 474 476 609; 414 468 466 464 463 465 467 469 600; 430 482 480 478 477 479 481 483 618; 446 496 494 492 491 493 495 497 636; 462 510 508 506 505 507 509 511 654; 582 564 546 528 519 537 555 573 591;;; 404 388 372 356 348 364 380 396 661; 452 160 148 136 130 142 154 305 643; 436 184 209 207 206 208 210 291 625; 420 172 199 197 196 198 200 277 607; 412 166 194 192 191 193 195 270 598; 428 178 204 202 201 203 205 284 616; 444 190 214 212 211 213 215 298 634; 460 256 242 228 221 235 249 263 652; 580 562 544 526 517 535 553 571 589;;; 402 386 370 354 346 362 378 394 659; 450 158 146 134 128 140 152 303 641; 434 182 42 34 30 38 107 289 623; 418 170 50 59 58 60 97 275 605; 410 164 46 56 55 57 92 268 596; 426 176 54 62 61 63 102 282 614; 442 188 82 72 67 77 87 296 632; 458 254 240 226 219 233 247 261 650; 578 560 542 524 515 533 551 569 587;;; 400 384 368 352 344 360 376 392 657; 448 156 144 132 126 138 150 301 639; 432 180 40 32 28 36 105 287 621; 416 168 48 4 2 21 95 273 603; 408 162 44 6 7 18 90 266 594; 424 174 52 12 9 15 100 280 612; 440 186 80 70 65 75 85 294 630; 456 252 238 224 217 231 245 259 648; 576 558 540 522 513 531 549 567 585;;; 399 383 367 351 343 359 375 391 656; 447 155 143 131 125 137 149 300 638; 431 179 39 31 27 35 104 286 620; 415 167 47 3 1 20 94 272 602; 407 161 43 5 0 17 89 265 593; 423 173 51 11 8 14 99 279 611; 439 185 79 69 64 74 84 293 629; 455 251 237 223 216 230 244 258 647; 575 557 539 521 512 530 548 566 584;;; 401 385 369 353 345 361 377 393 658; 449 157 145 133 127 139 151 302 640; 433 181 41 33 29 37 106 288 622; 417 169 49 26 25 22 96 274 604; 409 163 45 24 23 19 91 267 595; 425 175 53 13 10 16 101 281 613; 441 187 81 71 66 76 86 295 631; 457 253 239 225 218 232 246 260 649; 577 559 541 523 514 532 550 568 586;;; 403 387 371 355 347 363 379 395 660; 451 159 147 135 129 141 153 304 642; 435 183 124 122 121 123 108 290 624; 419 171 116 114 113 115 98 276 606; 411 165 112 110 109 111 93 269 597; 427 177 120 118 117 119 103 283 615; 443 189 83 73 68 78 88 297 633; 459 255 241 227 220 234 248 262 651; 579 561 543 525 516 534 552 570 588;;; 405 389 373 357 349 365 381 397 662; 453 342 340 338 337 339 341 306 644; 437 330 328 326 325 327 329 292 626; 421 318 316 314 313 315 317 278 608; 413 312 310 308 307 309 311 271 599; 429 324 322 320 319 321 323 285 617; 445 336 334 332 331 333 335 299 635; 461 257 243 229 222 236 250 264 653; 581 563 545 527 518 536 554 572 590;;; 728 726 724 722 721 723 725 727 664; 712 710 708 706 705 707 709 711 646; 696 694 692 690 689 691 693 695 628; 680 678 676 674 673 675 677 679 610; 672 670 668 666 665 667 669 671 601; 688 686 684 682 681 683 685 687 619; 704 702 700 698 697 699 701 703 637; 720 718 716 714 713 715 717 719 655; 583 565 547 529 520 538 556 574 592]
@inline function hash_position(x::SVector{3,<:Integer})
    @inbounds begin x1 = x[1]; x2 = x[2]; x3 = x[3] end
    y1 = x1 + 5; y2 = x2 + 5; y3 = x3 + 5
    if checkbounds(Bool, savedhashes3, y1, y2, y3)
        return @inbounds savedhashes3[y1, y2, y3]
    end
    x1 = ZtoN(x1); x2 = ZtoN(x2); x3 = ZtoN(x3)
    _b = x1 >= x2
    b1 = _b & (x1 >= x3)    # x1 ≥ x2 and x1 ≥ x3
    b2 = (!_b) & (x2 >= x3) # x2 > x1 and x2 ≥ x3
    b3 = (!b1) & (!b2)      # x3 > x1 and x3 > x2
    return b1*(x2*(x1 + 1) + x3 + x1^3) +
           b2*((x2 + 1)*(x1 + x2 + 1) + x3 + x2^3) +
           b3*((x3 + 1)*(2x3 + 1) + x3*(x1 + x3^2) + x2)
end

const savedhashes2 = Int[132 130 128 126 124 122 121 123 125 127 129 131 168; 142 90 88 86 84 82 81 83 85 87 89 120 166; 140 98 56 54 52 50 49 51 53 55 80 118 164; 138 96 62 30 28 26 25 27 29 48 78 116 162; 136 94 60 34 12 10 9 11 24 46 76 114 160; 134 92 58 32 14 2 1 8 22 44 74 112 158; 133 91 57 31 13 3 0 7 21 43 73 111 157; 135 93 59 33 15 5 4 6 23 45 75 113 159; 137 95 61 35 19 17 16 18 20 47 77 115 161; 139 97 63 41 39 37 36 38 40 42 79 117 163; 141 99 71 69 67 65 64 66 68 70 72 119 165; 143 109 107 105 103 101 100 102 104 106 108 110 167; 155 153 151 149 147 145 144 146 148 150 152 154 156]
@inline function hash_position(x::SVector{2,<:Integer})
    @inbounds begin x1 = x[1]; x2 = x[2] end
    y1 = x1 + 7; y2 = x2 + 7
    if checkbounds(Bool, savedhashes2, y1, y2)
        return @inbounds savedhashes2[y1, y2]
    end
    x1 = ZtoN(x1); x2 = ZtoN(x2)
    return ifelse(x1 >= x2, x2 + x1^2, x1 + x2*(x2 + 1) + 1)
end

@inline function hash_position(x::SVector{1,<:Integer})
    return ZtoN(@inbounds x[1])
end

@inline hash_position(::SVector{0,<:Integer}) = 0

@static if Int === Int64
    for N in 1:3 # accelerated hash computation
        @eval hash(x::PeriodicVertex{$N}, h::UInt) = hash(x.v << 32 ⊻ hash_position(x.ofs), h)
    end
end

"""
    hash_position(x::PeriodicVertex{N}, n::Integer) where N

Given `x`, a `PeriodicVertex{N}`, and the number `n` of vertex identifiers in a graph,
compute a unique positive integer hash for the given vertex.

This hash function is a bijection between the set of all the vertices of the periodic graph
and the set of positive integers. Its value is an integer between `1+n*(2d-1)^N`
(or `1` if `d == 0`) and `n*(2d+1)^N`, where `d = maximum(abs.(x.ofs))`.

In particular, this means that when one unit cell B is further than another A from the
origin (for the Manhattan distance), all vertices in B have a larger hash than all vertices
in A.
"""
@inline function hash_position(x::PeriodicVertex, n::Integer)
    return x.v + n*hash_position(x.ofs)
end



@inline NtoZ(n) = (((-1)^isodd(n))*n) >> 1

const savedreversehashes3 = SVector{729,SVector{3,Int}}(SVector{3,Int}[[0, 0, 0], [-1, 0, 0], [-1, 0, -1], [-1, -1, 0], [-1, -1, -1], [0, -1, 0], [0, -1, -1], [0, 0, -1], [1, 0, 0], [1, 0, -1], [1, 0, 1], [1, -1, 0], [1, -1, -1], [1, -1, 1], [1, 1, 0], [1, 1, -1], [1, 1, 1], [0, 1, 0], [0, 1, -1], [0, 1, 1], [-1, 1, 0], [-1, 1, -1], [-1, 1, 1], [0, 0, 1], [0, -1, 1], [-1, 0, 1], [-1, -1, 1], [-2, 0, 0], [-2, 0, -1], [-2, 0, 1], [-2, 0, -2], [-2, -1, 0], [-2, -1, -1], [-2, -1, 1], [-2, -1, -2], [-2, 1, 0], [-2, 1, -1], [-2, 1, 1], [-2, 1, -2], [-2, -2, 0], [-2, -2, -1], [-2, -2, 1], [-2, -2, -2], [0, -2, 0], [0, -2, -1], [0, -2, 1], [0, -2, -2], [-1, -2, 0], [-1, -2, -1], [-1, -2, 1], [-1, -2, -2], [1, -2, 0], [1, -2, -1], [1, -2, 1], [1, -2, -2], [0, 0, -2], [0, -1, -2], [0, 1, -2], [-1, 0, -2], [-1, -1, -2], [-1, 1, -2], [1, 0, -2], [1, -1, -2], [1, 1, -2], [2, 0, 0], [2, 0, -1], [2, 0, 1], [2, 0, -2], [2, 0, 2], [2, -1, 0], [2, -1, -1], [2, -1, 1], [2, -1, -2], [2, -1, 2], [2, 1, 0], [2, 1, -1], [2, 1, 1], [2, 1, -2], [2, 1, 2], [2, -2, 0], [2, -2, -1], [2, -2, 1], [2, -2, -2], [2, -2, 2], [2, 2, 0], [2, 2, -1], [2, 2, 1], [2, 2, -2], [2, 2, 2], [0, 2, 0], [0, 2, -1], [0, 2, 1], [0, 2, -2], [0, 2, 2], [-1, 2, 0], [-1, 2, -1], [-1, 2, 1], [-1, 2, -2], [-1, 2, 2], [1, 2, 0], [1, 2, -1], [1, 2, 1], [1, 2, -2], [1, 2, 2], [-2, 2, 0], [-2, 2, -1], [-2, 2, 1], [-2, 2, -2], [-2, 2, 2], [0, 0, 2], [0, -1, 2], [0, 1, 2], [0, -2, 2], [-1, 0, 2], [-1, -1, 2], [-1, 1, 2], [-1, -2, 2], [1, 0, 2], [1, -1, 2], [1, 1, 2], [1, -2, 2], [-2, 0, 2], [-2, -1, 2], [-2, 1, 2], [-2, -2, 2], [-3, 0, 0], [-3, 0, -1], [-3, 0, 1], [-3, 0, -2], [-3, 0, 2], [-3, 0, -3], [-3, -1, 0], [-3, -1, -1], [-3, -1, 1], [-3, -1, -2], [-3, -1, 2], [-3, -1, -3], [-3, 1, 0], [-3, 1, -1], [-3, 1, 1], [-3, 1, -2], [-3, 1, 2], [-3, 1, -3], [-3, -2, 0], [-3, -2, -1], [-3, -2, 1], [-3, -2, -2], [-3, -2, 2], [-3, -2, -3], [-3, 2, 0], [-3, 2, -1], [-3, 2, 1], [-3, 2, -2], [-3, 2, 2], [-3, 2, -3], [-3, -3, 0], [-3, -3, -1], [-3, -3, 1], [-3, -3, -2], [-3, -3, 2], [-3, -3, -3], [0, -3, 0], [0, -3, -1], [0, -3, 1], [0, -3, -2], [0, -3, 2], [0, -3, -3], [-1, -3, 0], [-1, -3, -1], [-1, -3, 1], [-1, -3, -2], [-1, -3, 2], [-1, -3, -3], [1, -3, 0], [1, -3, -1], [1, -3, 1], [1, -3, -2], [1, -3, 2], [1, -3, -3], [-2, -3, 0], [-2, -3, -1], [-2, -3, 1], [-2, -3, -2], [-2, -3, 2], [-2, -3, -3], [2, -3, 0], [2, -3, -1], [2, -3, 1], [2, -3, -2], [2, -3, 2], [2, -3, -3], [0, 0, -3], [0, -1, -3], [0, 1, -3], [0, -2, -3], [0, 2, -3], [-1, 0, -3], [-1, -1, -3], [-1, 1, -3], [-1, -2, -3], [-1, 2, -3], [1, 0, -3], [1, -1, -3], [1, 1, -3], [1, -2, -3], [1, 2, -3], [-2, 0, -3], [-2, -1, -3], [-2, 1, -3], [-2, -2, -3], [-2, 2, -3], [2, 0, -3], [2, -1, -3], [2, 1, -3], [2, -2, -3], [2, 2, -3], [3, 0, 0], [3, 0, -1], [3, 0, 1], [3, 0, -2], [3, 0, 2], [3, 0, -3], [3, 0, 3], [3, -1, 0], [3, -1, -1], [3, -1, 1], [3, -1, -2], [3, -1, 2], [3, -1, -3], [3, -1, 3], [3, 1, 0], [3, 1, -1], [3, 1, 1], [3, 1, -2], [3, 1, 2], [3, 1, -3], [3, 1, 3], [3, -2, 0], [3, -2, -1], [3, -2, 1], [3, -2, -2], [3, -2, 2], [3, -2, -3], [3, -2, 3], [3, 2, 0], [3, 2, -1], [3, 2, 1], [3, 2, -2], [3, 2, 2], [3, 2, -3], [3, 2, 3], [3, -3, 0], [3, -3, -1], [3, -3, 1], [3, -3, -2], [3, -3, 2], [3, -3, -3], [3, -3, 3], [3, 3, 0], [3, 3, -1], [3, 3, 1], [3, 3, -2], [3, 3, 2], [3, 3, -3], [3, 3, 3], [0, 3, 0], [0, 3, -1], [0, 3, 1], [0, 3, -2], [0, 3, 2], [0, 3, -3], [0, 3, 3], [-1, 3, 0], [-1, 3, -1], [-1, 3, 1], [-1, 3, -2], [-1, 3, 2], [-1, 3, -3], [-1, 3, 3], [1, 3, 0], [1, 3, -1], [1, 3, 1], [1, 3, -2], [1, 3, 2], [1, 3, -3], [1, 3, 3], [-2, 3, 0], [-2, 3, -1], [-2, 3, 1], [-2, 3, -2], [-2, 3, 2], [-2, 3, -3], [-2, 3, 3], [2, 3, 0], [2, 3, -1], [2, 3, 1], [2, 3, -2], [2, 3, 2], [2, 3, -3], [2, 3, 3], [-3, 3, 0], [-3, 3, -1], [-3, 3, 1], [-3, 3, -2], [-3, 3, 2], [-3, 3, -3], [-3, 3, 3], [0, 0, 3], [0, -1, 3], [0, 1, 3], [0, -2, 3], [0, 2, 3], [0, -3, 3], [-1, 0, 3], [-1, -1, 3], [-1, 1, 3], [-1, -2, 3], [-1, 2, 3], [-1, -3, 3], [1, 0, 3], [1, -1, 3], [1, 1, 3], [1, -2, 3], [1, 2, 3], [1, -3, 3], [-2, 0, 3], [-2, -1, 3], [-2, 1, 3], [-2, -2, 3], [-2, 2, 3], [-2, -3, 3], [2, 0, 3], [2, -1, 3], [2, 1, 3], [2, -2, 3], [2, 2, 3], [2, -3, 3], [-3, 0, 3], [-3, -1, 3], [-3, 1, 3], [-3, -2, 3], [-3, 2, 3], [-3, -3, 3], [-4, 0, 0], [-4, 0, -1], [-4, 0, 1], [-4, 0, -2], [-4, 0, 2], [-4, 0, -3], [-4, 0, 3], [-4, 0, -4], [-4, -1, 0], [-4, -1, -1], [-4, -1, 1], [-4, -1, -2], [-4, -1, 2], [-4, -1, -3], [-4, -1, 3], [-4, -1, -4], [-4, 1, 0], [-4, 1, -1], [-4, 1, 1], [-4, 1, -2], [-4, 1, 2], [-4, 1, -3], [-4, 1, 3], [-4, 1, -4], [-4, -2, 0], [-4, -2, -1], [-4, -2, 1], [-4, -2, -2], [-4, -2, 2], [-4, -2, -3], [-4, -2, 3], [-4, -2, -4], [-4, 2, 0], [-4, 2, -1], [-4, 2, 1], [-4, 2, -2], [-4, 2, 2], [-4, 2, -3], [-4, 2, 3], [-4, 2, -4], [-4, -3, 0], [-4, -3, -1], [-4, -3, 1], [-4, -3, -2], [-4, -3, 2], [-4, -3, -3], [-4, -3, 3], [-4, -3, -4], [-4, 3, 0], [-4, 3, -1], [-4, 3, 1], [-4, 3, -2], [-4, 3, 2], [-4, 3, -3], [-4, 3, 3], [-4, 3, -4], [-4, -4, 0], [-4, -4, -1], [-4, -4, 1], [-4, -4, -2], [-4, -4, 2], [-4, -4, -3], [-4, -4, 3], [-4, -4, -4], [0, -4, 0], [0, -4, -1], [0, -4, 1], [0, -4, -2], [0, -4, 2], [0, -4, -3], [0, -4, 3], [0, -4, -4], [-1, -4, 0], [-1, -4, -1], [-1, -4, 1], [-1, -4, -2], [-1, -4, 2], [-1, -4, -3], [-1, -4, 3], [-1, -4, -4], [1, -4, 0], [1, -4, -1], [1, -4, 1], [1, -4, -2], [1, -4, 2], [1, -4, -3], [1, -4, 3], [1, -4, -4], [-2, -4, 0], [-2, -4, -1], [-2, -4, 1], [-2, -4, -2], [-2, -4, 2], [-2, -4, -3], [-2, -4, 3], [-2, -4, -4], [2, -4, 0], [2, -4, -1], [2, -4, 1], [2, -4, -2], [2, -4, 2], [2, -4, -3], [2, -4, 3], [2, -4, -4], [-3, -4, 0], [-3, -4, -1], [-3, -4, 1], [-3, -4, -2], [-3, -4, 2], [-3, -4, -3], [-3, -4, 3], [-3, -4, -4], [3, -4, 0], [3, -4, -1], [3, -4, 1], [3, -4, -2], [3, -4, 2], [3, -4, -3], [3, -4, 3], [3, -4, -4], [0, 0, -4], [0, -1, -4], [0, 1, -4], [0, -2, -4], [0, 2, -4], [0, -3, -4], [0, 3, -4], [-1, 0, -4], [-1, -1, -4], [-1, 1, -4], [-1, -2, -4], [-1, 2, -4], [-1, -3, -4], [-1, 3, -4], [1, 0, -4], [1, -1, -4], [1, 1, -4], [1, -2, -4], [1, 2, -4], [1, -3, -4], [1, 3, -4], [-2, 0, -4], [-2, -1, -4], [-2, 1, -4], [-2, -2, -4], [-2, 2, -4], [-2, -3, -4], [-2, 3, -4], [2, 0, -4], [2, -1, -4], [2, 1, -4], [2, -2, -4], [2, 2, -4], [2, -3, -4], [2, 3, -4], [-3, 0, -4], [-3, -1, -4], [-3, 1, -4], [-3, -2, -4], [-3, 2, -4], [-3, -3, -4], [-3, 3, -4], [3, 0, -4], [3, -1, -4], [3, 1, -4], [3, -2, -4], [3, 2, -4], [3, -3, -4], [3, 3, -4], [4, 0, 0], [4, 0, -1], [4, 0, 1], [4, 0, -2], [4, 0, 2], [4, 0, -3], [4, 0, 3], [4, 0, -4], [4, 0, 4], [4, -1, 0], [4, -1, -1], [4, -1, 1], [4, -1, -2], [4, -1, 2], [4, -1, -3], [4, -1, 3], [4, -1, -4], [4, -1, 4], [4, 1, 0], [4, 1, -1], [4, 1, 1], [4, 1, -2], [4, 1, 2], [4, 1, -3], [4, 1, 3], [4, 1, -4], [4, 1, 4], [4, -2, 0], [4, -2, -1], [4, -2, 1], [4, -2, -2], [4, -2, 2], [4, -2, -3], [4, -2, 3], [4, -2, -4], [4, -2, 4], [4, 2, 0], [4, 2, -1], [4, 2, 1], [4, 2, -2], [4, 2, 2], [4, 2, -3], [4, 2, 3], [4, 2, -4], [4, 2, 4], [4, -3, 0], [4, -3, -1], [4, -3, 1], [4, -3, -2], [4, -3, 2], [4, -3, -3], [4, -3, 3], [4, -3, -4], [4, -3, 4], [4, 3, 0], [4, 3, -1], [4, 3, 1], [4, 3, -2], [4, 3, 2], [4, 3, -3], [4, 3, 3], [4, 3, -4], [4, 3, 4], [4, -4, 0], [4, -4, -1], [4, -4, 1], [4, -4, -2], [4, -4, 2], [4, -4, -3], [4, -4, 3], [4, -4, -4], [4, -4, 4], [4, 4, 0], [4, 4, -1], [4, 4, 1], [4, 4, -2], [4, 4, 2], [4, 4, -3], [4, 4, 3], [4, 4, -4], [4, 4, 4], [0, 4, 0], [0, 4, -1], [0, 4, 1], [0, 4, -2], [0, 4, 2], [0, 4, -3], [0, 4, 3], [0, 4, -4], [0, 4, 4], [-1, 4, 0], [-1, 4, -1], [-1, 4, 1], [-1, 4, -2], [-1, 4, 2], [-1, 4, -3], [-1, 4, 3], [-1, 4, -4], [-1, 4, 4], [1, 4, 0], [1, 4, -1], [1, 4, 1], [1, 4, -2], [1, 4, 2], [1, 4, -3], [1, 4, 3], [1, 4, -4], [1, 4, 4], [-2, 4, 0], [-2, 4, -1], [-2, 4, 1], [-2, 4, -2], [-2, 4, 2], [-2, 4, -3], [-2, 4, 3], [-2, 4, -4], [-2, 4, 4], [2, 4, 0], [2, 4, -1], [2, 4, 1], [2, 4, -2], [2, 4, 2], [2, 4, -3], [2, 4, 3], [2, 4, -4], [2, 4, 4], [-3, 4, 0], [-3, 4, -1], [-3, 4, 1], [-3, 4, -2], [-3, 4, 2], [-3, 4, -3], [-3, 4, 3], [-3, 4, -4], [-3, 4, 4], [3, 4, 0], [3, 4, -1], [3, 4, 1], [3, 4, -2], [3, 4, 2], [3, 4, -3], [3, 4, 3], [3, 4, -4], [3, 4, 4], [-4, 4, 0], [-4, 4, -1], [-4, 4, 1], [-4, 4, -2], [-4, 4, 2], [-4, 4, -3], [-4, 4, 3], [-4, 4, -4], [-4, 4, 4], [0, 0, 4], [0, -1, 4], [0, 1, 4], [0, -2, 4], [0, 2, 4], [0, -3, 4], [0, 3, 4], [0, -4, 4], [-1, 0, 4], [-1, -1, 4], [-1, 1, 4], [-1, -2, 4], [-1, 2, 4], [-1, -3, 4], [-1, 3, 4], [-1, -4, 4], [1, 0, 4], [1, -1, 4], [1, 1, 4], [1, -2, 4], [1, 2, 4], [1, -3, 4], [1, 3, 4], [1, -4, 4], [-2, 0, 4], [-2, -1, 4], [-2, 1, 4], [-2, -2, 4], [-2, 2, 4], [-2, -3, 4], [-2, 3, 4], [-2, -4, 4], [2, 0, 4], [2, -1, 4], [2, 1, 4], [2, -2, 4], [2, 2, 4], [2, -3, 4], [2, 3, 4], [2, -4, 4], [-3, 0, 4], [-3, -1, 4], [-3, 1, 4], [-3, -2, 4], [-3, 2, 4], [-3, -3, 4], [-3, 3, 4], [-3, -4, 4], [3, 0, 4], [3, -1, 4], [3, 1, 4], [3, -2, 4], [3, 2, 4], [3, -3, 4], [3, 3, 4], [3, -4, 4], [-4, 0, 4], [-4, -1, 4], [-4, 1, 4], [-4, -2, 4], [-4, 2, 4], [-4, -3, 4], [-4, 3, 4], [-4, -4, 4]])
function reverse_hash_position(x::Integer, ::Val{3})
    x < length(savedreversehashes3) && return @inbounds savedreversehashes3[x+1]
    n = floor(Int, cbrt(x))
    zn = NtoZ(n)
    n2 = n^2
    y = x - n*n2
    if y ≤ 2n+n2
        x2, x3 = divrem(y, n+1)
        return SVector{3,Int}(zn, NtoZ(x2), NtoZ(x3))
    end
    y -= n2 + 2n + 1
    if y ≤ n2 - 1 + n
        x1, x3 = divrem(y, n+1)
        return SVector{3,Int}(NtoZ(x1), zn, NtoZ(x3))
    end
    y -= n2 + n
    x1, x2 = divrem(y, n)
    return SVector{3,Int}(NtoZ(x1), NtoZ(x2), zn)
end

const savedreversehashes2 = SVector{169,SVector{2,Int}}(SVector{2, Int64}[[0, 0], [-1, 0], [-1, -1], [0, -1], [1, 0], [1, -1], [1, 1], [0, 1], [-1, 1], [-2, 0], [-2, -1], [-2, 1], [-2, -2], [0, -2], [-1, -2], [1, -2], [2, 0], [2, -1], [2, 1], [2, -2], [2, 2], [0, 2], [-1, 2], [1, 2], [-2, 2], [-3, 0], [-3, -1], [-3, 1], [-3, -2], [-3, 2], [-3, -3], [0, -3], [-1, -3], [1, -3], [-2, -3], [2, -3], [3, 0], [3, -1], [3, 1], [3, -2], [3, 2], [3, -3], [3, 3], [0, 3], [-1, 3], [1, 3], [-2, 3], [2, 3], [-3, 3], [-4, 0], [-4, -1], [-4, 1], [-4, -2], [-4, 2], [-4, -3], [-4, 3], [-4, -4], [0, -4], [-1, -4], [1, -4], [-2, -4], [2, -4], [-3, -4], [3, -4], [4, 0], [4, -1], [4, 1], [4, -2], [4, 2], [4, -3], [4, 3], [4, -4], [4, 4], [0, 4], [-1, 4], [1, 4], [-2, 4], [2, 4], [-3, 4], [3, 4], [-4, 4], [-5, 0], [-5, -1], [-5, 1], [-5, -2], [-5, 2], [-5, -3], [-5, 3], [-5, -4], [-5, 4], [-5, -5], [0, -5], [-1, -5], [1, -5], [-2, -5], [2, -5], [-3, -5], [3, -5], [-4, -5], [4, -5], [5, 0], [5, -1], [5, 1], [5, -2], [5, 2], [5, -3], [5, 3], [5, -4], [5, 4], [5, -5], [5, 5], [0, 5], [-1, 5], [1, 5], [-2, 5], [2, 5], [-3, 5], [3, 5], [-4, 5], [4, 5], [-5, 5], [-6, 0], [-6, -1], [-6, 1], [-6, -2], [-6, 2], [-6, -3], [-6, 3], [-6, -4], [-6, 4], [-6, -5], [-6, 5], [-6, -6], [0, -6], [-1, -6], [1, -6], [-2, -6], [2, -6], [-3, -6], [3, -6], [-4, -6], [4, -6], [-5, -6], [5, -6], [6, 0], [6, -1], [6, 1], [6, -2], [6, 2], [6, -3], [6, 3], [6, -4], [6, 4], [6, -5], [6, 5], [6, -6], [6, 6], [0, 6], [-1, 6], [1, 6], [-2, 6], [2, 6], [-3, 6], [3, 6], [-4, 6], [4, 6], [-5, 6], [5, 6], [-6, 6]])
function reverse_hash_position(x::Integer, ::Val{2})
    x < length(savedreversehashes2) && return @inbounds savedreversehashes2[x+1]
    n = floor(Int, sqrt(x))
    zn = NtoZ(n)
    n2 = n^2
    if x ≤ n2 + n
        return SVector{2,Int}(zn, NtoZ(x - n2))
    end
    return SVector{2,Int}(NtoZ(x - 1 - n2 - n), zn)
end


reverse_hash_position(x::Integer, ::Val{1}) = SVector{1,Int}(NtoZ(x))

reverse_hash_position(::Integer, ::Val{0}) = SVector{0,Int}()

"""
    reverse_hash_position(hash::Integer, n::Integer, ::Val{N}) where N

Given a `hash` obtained from [`hash_position`](@ref)`(x, n)` where `x` is a
`PeriodicVertex{N}`, return the corresponding `x`.

If the offset of the returned `PeriodicVertex` is not needed, simply doing `mod1(x, n)`
yields the identifier of the vertex and is faster.
"""
function reverse_hash_position(hash::Integer, n::Integer, ::Val{N}) where N
    x, node = fldmod1(hash, n)
    return PeriodicVertex{N}(node, reverse_hash_position(x-1, Val(N)))
end
